name: ðŸš€ CI & CD ðŸš€

on:
  pull_request:
    branches:
      - develop
      - main
    types:
      - opened
      - reopened
      - synchronize
      - closed
  push:
    branches:
      - develop
      - main

permissions:
  id-token: write
  contents: read

jobs:
  initial:
    name: ðŸ”¸ Initial
    uses: dga-devops/miniapps-template-angular/.github/workflows/init-vars.yaml@develop

  test:
    name: ðŸ”¸ Test
    needs: initial
    if: ${{ needs.initial.outputs.is-test == 'true' }}
    uses: ./.github/workflows/unit-test-nestjs.yaml
    with:
      aws-region: ${{ needs.initial.outputs.aws-region }}
      aws-role-to-assume: ${{ needs.initial.outputs.aws-role-to-assume }}
      ignore-unit-test-error: ${{ needs.initial.outputs.ignore-unit-test-error == 'true' }}
      test-image-name: ${{ needs.initial.outputs.test-image-name }}
      test-image-tag: ${{ needs.initial.outputs.test-image-tag }}

  scan:
    name: ðŸ”¸ Scan
    needs: [ initial, test ]
    if: ${{ always() &&  (needs.initial.outputs.is-scan != 'false') && (needs.initial.outputs.ignore-unit-test-error == 'true' || needs.test.result == 'skipped' || needs.test.result == 'success') }}
    uses: ./.github/workflows/sonar-scan-nestjs.yaml
    with:
      ignore-sonar-quality: ${{ needs.initial.outputs.ignore-sonar-quality == 'true' }}
      sonar-project-key: ${{ needs.initial.outputs.sonar-project-key }}
      sonar-host-url: ${{ needs.initial.outputs.sonar-host-url }}
      source-code-directory: ${{ needs.initial.outputs.sonar-scan-source-code-target }}
    secrets:
      sonar-token: ${{ secrets.SONAR_TOKEN }}

  build-push:
    name: ðŸ“¦ðŸš€ Build & Push
    needs: [ initial, test, scan ]
    if: ${{ always() && (needs.initial.outputs.is-build == 'true') && (needs.test.result == 'skipped'|| needs.scan.result == 'success' || needs.initial.outputs.ignore-sonar-quality == 'true') && (needs.test.result != 'failure' ) }}
    uses: dga-devops/miniapps-template-angular/.github/workflows/build-push.yaml@develop
    with:
      aws-region: ${{ needs.initial.outputs.aws-region }}
      aws-role-to-assume: ${{ needs.initial.outputs.aws-role-to-assume }}
      image-name: ${{ needs.initial.outputs.image-name }}
      image-tag: ${{ needs.initial.outputs.image-tag }}
      build-spec: ${{ needs.initial.outputs.build-spec }}
      build-args: >
        BUILD_ENV=${{ needs.initial.outputs.build-env }}
        BASE_HREF=${{ needs.initial.outputs.path-pattern }}

  deploy:
    name: ðŸ”¸ Deploy
    needs: [ initial, build-push ]
    if: ${{ always() && (needs.initial.outputs.is-deploy == 'true' || needs.build-push.result == 'skipped') }}
    uses: dga-devops/miniapps-template-angular/.github/workflows/deploy.yaml@develop
    with:
      aws-region: ${{ needs.initial.outputs.aws-region }}
      aws-role-to-assume: ${{ needs.initial.outputs.aws-role-to-assume }}
      image-name: ${{ needs.initial.outputs.image-name }}
      image-tag: ${{ needs.initial.outputs.image-tag }}
      cluster-name: ${{ needs.initial.outputs.cluster-name }}
      service-name: ${{ needs.initial.outputs.service-name }}
      task-definition: ${{ needs.initial.outputs.task-definition }}
      container-name: ${{ needs.initial.outputs.container-name }}


