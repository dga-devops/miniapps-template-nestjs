name: 🔧 Init Variables

on:
  workflow_call:
    inputs:
      config-path:
        required: false
        type: string
        default: .github-ci.yaml

    outputs:
      environment:
        value: ${{ jobs.set.outputs.environment }}
      is-pull-request:
        value: ${{ jobs.set.outputs.is-pull-request }}
      is-merge:
        value: ${{ jobs.set.outputs.is-merge }}
      run-unit-test:
        value: ${{ jobs.set.outputs.run-unit-test }}
      ignore-unit-test-error:
        value: ${{ jobs.set.outputs.ignore-unit-test-error }}
      test-image-name:
        value: ${{ jobs.set.outputs.test-image-name }}
      test-image-tag:
        value: ${{ jobs.set.outputs.test-image-tag }}
      run-sonar:
        value: ${{ jobs.set.outputs.run-sonar }}
      ignore-sonar-quality:
        value: ${{ jobs.set.outputs.ignore-sonar-quality }}
      sonar-project-key:
        value: ${{ jobs.set.outputs.sonar-project-key }}
      sonar-host-url:
        value: ${{ jobs.set.outputs.sonar-host-url }}
      sonar-scan-source-code-target:
        value: ${{ jobs.set.outputs.sonar-scan-source-code-target }}
      image-name:
        value: ${{ jobs.set.outputs.image-name }}
      image-tag:
        value: ${{ jobs.set.outputs.image-tag }}
      build-spec:
        value: ${{ jobs.set.outputs.build-spec }}
      build-env:
        value: ${{ jobs.set.outputs.build-env }}
      aws-region:
        value: ${{ jobs.set.outputs.aws-region }}
      aws-role-to-assume:
        value: ${{ jobs.set.outputs.aws-role-to-assume }}
      cluster-name:
        value: ${{ jobs.set.outputs.cluster-name }}
      service-name:
        value: ${{ jobs.set.outputs.service-name }}
      task-definition:
        value: ${{ jobs.set.outputs.task-definition }}
      container-name:
        value: ${{ jobs.set.outputs.container-name }}
      domain:
        value: ${{ jobs.set.outputs.domain }}
      sub-domain:
        value: ${{ jobs.set.outputs.sub-domain }}
      path-pattern:
        value: ${{ jobs.set.outputs.path-pattern }}
      is-test:
        value: ${{ jobs.set.outputs.is-test }}
      is-scan:
        value: ${{ jobs.set.outputs.is-scan }}
      is-build:
        value: ${{ jobs.set.outputs.is-build }}
      is-deploy:
        value: ${{ jobs.set.outputs.is-deploy }}

jobs:
  set:
    runs-on: self-hosted
    outputs:
      environment: ${{ steps.set-vars.outputs.environment }}
      is-pull-request: ${{ steps.set-vars.outputs.isPullRequest }}
      is-merge: ${{ steps.set-vars.outputs.isMerge }}
      run-unit-test: ${{ steps.set-vars.outputs.runUnitTest }}
      ignore-unit-test-error: ${{ steps.set-vars.outputs.ignoreUnitTestError }}
      test-image-name: ${{ steps.set-vars.outputs.testImageName }}
      test-image-tag: ${{ steps.set-vars.outputs.testImageTag }}
      run-sonar: ${{ steps.set-vars.outputs.runSonar }}
      ignore-sonar-quality: ${{ steps.set-vars.outputs.ignoreSonarQuality }}
      sonar-project-key: ${{ steps.set-vars.outputs.sonarProjectKey }}
      sonar-host-url: ${{ steps.set-vars.outputs.sonarHostUrl }}
      sonar-scan-source-code-target: ${{ steps.set-vars.outputs.sonarScanSourceCodeTarget }}
      image-name: ${{ steps.set-vars.outputs.imageName }}
      image-tag: ${{ steps.set-vars.outputs.imageTag }}
      build-spec: ${{ steps.set-vars.outputs.buildSpec }}
      build-env: ${{ steps.set-vars.outputs.buildEnv }}
      aws-region: ${{ steps.set-vars.outputs.awsRegion }}
      aws-role-to-assume: ${{ steps.set-vars.outputs.awsRoleToAssume }}
      cluster-name: ${{ steps.set-vars.outputs.clusterName }}
      service-name: ${{ steps.set-vars.outputs.serviceName }}
      task-definition: ${{ steps.set-vars.outputs.taskDefinition }}
      container-name: ${{ steps.set-vars.outputs.containerName }}
      domain: ${{ steps.set-vars.outputs.domain }}
      sub-domain: ${{ steps.set-vars.outputs.subDomain }}
      path-pattern: ${{ steps.set-vars.outputs.pathPattern }}
      is-test: ${{ steps.set-vars.outputs.isTest }}
      is-scan: ${{ steps.set-vars.outputs.isScan }}
      is-build: ${{ steps.set-vars.outputs.isBuild }}
      is-deploy: ${{ steps.set-vars.outputs.isDeploy }}

    steps:
      - name: 📥 Install yq
        run: sudo apt-get install -y yq

      - name: 🗂️ Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set Variables
        id: set-vars
        shell: bash
        run: |
          shortCommit="${GITHUB_SHA::7}"
          configPath="${{ inputs.config-path }}"

          environment=unknown
          isPullRequest=false
          isMerge=false
          isTag=false
          isDeploy=false
          imageTag=unknown-${shortCommit}
          buildSpec="Dockerfile"
          buildEnv="develop"
          isBuild=true
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            if [[ "$GITHUB_BASE_REF" == "develop" ]]; then
              environment="dev"
              imageTag=dev-${shortCommit}
            elif [[ "$GITHUB_BASE_REF" == "main" ]]; then
              environment="uat"
              imageTag=uat-${shortCommit}
            fi
            isPullRequest=true
            isBuild=false
            if [[ "$GITHUB_EVENT_ACTION" == "closed" ]]; then
              merged=$(jq -r '.pull_request.merged' "$GITHUB_EVENT_PATH")
              if [[ "$merged" == "true" ]]; then
                isMerge=true
                isBuild=true
                isDeploy=true
          
              fi
            fi

          elif [[ "$GITHUB_EVENT_NAME" == "push" ]]; then
            if [[ "$GITHUB_REF" == refs/heads/develop ]]; then
              environment=dev
              buildEnv=develop
              imageTag=dev-${shortCommit}
              isDeploy=true

            elif [[ "$GITHUB_REF" == refs/heads/main ]]; then
              environment=uat
              buildEnv=uat
              imageTag=uat-${shortCommit}
              isDeploy=true
          
            elif [[ "$GITHUB_REF" == refs/tags/* ]]; then
              tagName="${GITHUB_REF#refs/tags/}"
              isTag=true
              if [[ "$tagName" == baseimage-* ]]; then
                environment=baseimage
                buildEnv=base
                imageTag=$tagName
                buildSpec="Dockerfile.baseimage"
              elif [[ "$tagName" == testimage-* ]]; then
                environment=testimage
                buildEnv=test
                imageTag=$tagName
                buildSpec="Dockerfile.testimage"
              elif [[ "$tagName" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                environment=prod
                buildEnv=production
                imageTag=${tagName}
              else
                environment="dev"
                buildEnv="develop"
                imageTag="dev-${tagName}"
              fi
            else
              refName="${GITHUB_REF#refs/heads/}"
              environment=feature
              buildEnv=develop
              imageTag=feature-${shortCommit}-${refName//\//-}
            fi

          elif [[ "$GITHUB_EVENT_NAME" == "workflow_dispatch" ]]; then
            isDeploy=true
            environment=${{ github.event.inputs.environment }}
            imageTag=${{ github.event.inputs.image-tag }}
          fi

          # Load config
          imageName=$(yq '.env.IMAGE_NAME' "$configPath"| xargs)
          runUnitTest=$(yq '.env.RUN_UNIT_TEST' "$configPath"| xargs)
          ignoreUnitTestError=$(yq '.env.IGNORE_UNIT_TEST_ERROR' "$configPath"| xargs)
          testImageName=$(yq '.env.TEST_IMAGE_NAME' "$configPath"| xargs)
          testImageTag=$(yq '.env.TEST_IMAGE_TAG' "$configPath"| xargs)
          runSonar=$(yq '.env.RUN_SONAR' "$configPath"| xargs)
          ignoreSonarQuality=$(yq '.env.IGNORE_SONAR_QUALITY' "$configPath"| xargs)
          sonarProjectKey=$(yq '.env.SONAR_PROJECT_KEY' "$configPath"| xargs)
          sonarHostUrl=$(yq '.env.SONAR_HOST_URL' "$configPath"| xargs)
          sonarScanSourceCodeTarget=$(yq '.env.SONAR_SCAN_SOURCE_CODE_TARGET' "$configPath"| xargs)
          name=$(yq '.env.NAME' "$configPath"| xargs)
          awsRegion=$(yq '.env.AWS_REGION' "$configPath"| xargs)
          awsRoleToAssume=$(yq '.env.AWS_ROLE_TO_ASSUME' "$configPath"| xargs)
          domain=$(yq '.env.DOMAIN' "$configPath"| xargs)
          subDomain=$(yq '.env.SUB_DOMAIN' "$configPath"| xargs)
          pathPattern=$(yq '.env.PATH_PATTERN' "$configPath"| xargs)

          clusterName=miniapps-cluster-${environment}
          serviceName=${name}-${environment}
          taskDefinition=${name}-${environment}
          containerName=${name}-${environment}

          isTest=false
          [[ "$runUnitTest" == "true" && "$isMerge" == "false" && "$isTag" == "false" && "$isDeploy" == "false" ]] && isTest="true"
          isScan=false
          [[ "$runSonar" == "true" && "$isMerge" == "false" && "$isTag" == "false" && "$isDeploy" == "false" ]] && isScan="true"

          echo "environment=$environment" >> $GITHUB_OUTPUT
          echo "isPullRequest=$isPullRequest" >> $GITHUB_OUTPUT
          echo "isMerge=$isMerge" >> $GITHUB_OUTPUT
          echo "isTag=$isTag" >> $GITHUB_OUTPUT
          echo "imageName=$imageName" >> $GITHUB_OUTPUT
          echo "imageTag=$imageTag" >> $GITHUB_OUTPUT
          echo "buildSpec=$buildSpec" >> $GITHUB_OUTPUT
          echo "buildEnv=$buildEnv" >> $GITHUB_OUTPUT
          echo "runUnitTest=$runUnitTest" >> $GITHUB_OUTPUT
          echo "ignoreUnitTestError=$ignoreUnitTestError" >> $GITHUB_OUTPUT
          echo "testImageName=$testImageName" >> $GITHUB_OUTPUT
          echo "testImageTag=$testImageTag" >> $GITHUB_OUTPUT
          echo "runSonar=$runSonar" >> $GITHUB_OUTPUT
          echo "ignoreSonarQuality=$ignoreSonarQuality" >> $GITHUB_OUTPUT
          echo "sonarProjectKey=$sonarProjectKey" >> $GITHUB_OUTPUT
          echo "sonarHostUrl=$sonarHostUrl" >> $GITHUB_OUTPUT
          echo "sonarScanSourceCodeTarget=$sonarScanSourceCodeTarget" >> $GITHUB_OUTPUT
          echo "awsRegion=$awsRegion" >> $GITHUB_OUTPUT
          echo "awsRoleToAssume=$awsRoleToAssume" >> $GITHUB_OUTPUT
          echo "clusterName=$clusterName" >> $GITHUB_OUTPUT
          echo "serviceName=$serviceName" >> $GITHUB_OUTPUT
          echo "taskDefinition=$taskDefinition" >> $GITHUB_OUTPUT
          echo "containerName=$containerName" >> $GITHUB_OUTPUT
          echo "domain=$domain" >> $GITHUB_OUTPUT
          echo "subDomain=$subDomain" >> $GITHUB_OUTPUT
          echo "pathPattern=$pathPattern" >> $GITHUB_OUTPUT
          echo "isTest=$isTest" >> $GITHUB_OUTPUT
          echo "isScan=$isScan" >> $GITHUB_OUTPUT
          echo "isBuild=$isBuild" >> $GITHUB_OUTPUT
          echo "isDeploy=$isDeploy" >> $GITHUB_OUTPUT

      - name: 📋 Summary
        run: |
          echo "🔧 Environment Info"
          echo "  🏷️ Environment        : ${{ steps.set-vars.outputs.environment }}"
          echo "  🔁 Is Pull Request    : ${{ steps.set-vars.outputs.isPullRequest }}"
          echo "  🔀 Is Merge           : ${{ steps.set-vars.outputs.isMerge }}"
          echo "  🏷️ Is Tag             : ${{ steps.set-vars.outputs.isTag }}"
          
          echo ""
          echo "🧪 Unit Test Config"
          echo "  ✅ Run Unit Test       : ${{ steps.set-vars.outputs.runUnitTest }}"
          echo "  🚫 Ignore Test Error   : ${{ steps.set-vars.outputs.ignoreUnitTestError }}"
          echo "  🐳 Test Image Name     : ${{ steps.set-vars.outputs.testImageName }}"
          echo "  🏷️ Test Image Tag      : ${{ steps.set-vars.outputs.testImageTag }}"
          
          echo ""
          echo "🔍 SonarQube Scan"
          echo "  📦 Run Sonar           : ${{ steps.set-vars.outputs.runSonar }}"
          echo "  🚫 Ignore Quality      : ${{ steps.set-vars.outputs.ignoreSonarQuality }}"
          echo "  🗝️ Project Key         : ${{ steps.set-vars.outputs.sonarProjectKey }}"
          echo "  🌐 Host URL            : ${{ steps.set-vars.outputs.sonarHostUrl }}"
          echo "  📁 Scan Target         : ${{ steps.set-vars.outputs.sonarScanSourceCodeTarget }}"
          
          echo ""
          echo "📦 Build & Push Info"
          echo "  🐳 Image Name          : ${{ steps.set-vars.outputs.imageName }}"
          echo "  🏷️ Image Tag           : ${{ steps.set-vars.outputs.imageTag }}"
          echo "  📝 Build Spec          : ${{ steps.set-vars.outputs.buildSpec }}"
          echo "  🌱 Build Env           : ${{ steps.set-vars.outputs.buildEnv }}"
          
          echo ""
          echo "☁️ AWS Deployment"
          echo "  🌍 AWS Region          : ${{ steps.set-vars.outputs.awsRegion }}"
          echo "  🔐 Role to Assume      : ${{ steps.set-vars.outputs.awsRoleToAssume }}"
          echo "  📦 Cluster Name        : ${{ steps.set-vars.outputs.clusterName }}"
          echo "  🛠️ Service Name        : ${{ steps.set-vars.outputs.serviceName }}"
          echo "  🧩 Task Definition     : ${{ steps.set-vars.outputs.taskDefinition }}"
          echo "  📦 Container Name      : ${{ steps.set-vars.outputs.containerName }}"
          
          echo ""
          echo "🌐 Domain Routing"
          echo "  🌐 Domain              : ${{ steps.set-vars.outputs.domain }}"
          echo "  🧭 Sub Domain          : ${{ steps.set-vars.outputs.subDomain }}"
          echo "  🚏 Path Pattern        : ${{ steps.set-vars.outputs.pathPattern }}"
          
          echo ""
          echo "🔁 Workflow Switches"
          echo "  🧪 Is Test             : ${{ steps.set-vars.outputs.isTest }}"
          echo "  🔍 Is Scan             : ${{ steps.set-vars.outputs.isScan }}"
          echo "  🔁 Is Build            : ${{ steps.set-vars.outputs.isBuild }}"
          echo "  🏗️ Is Deploy           : ${{ steps.set-vars.outputs.isDeploy }}"
